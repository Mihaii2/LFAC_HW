usr_type myType {
    char a;
    char gender; // comentariu
    char b;
    char c;

    #END_USR_TYPE_VARS 

    int someMethod(int boy, char ch) {
        int n_ajdwadwh = 15;
        while(1) {
            int something = 3;
        }
        while(1) {
            const int omegalul = 3;
        }
    }
} 

usr_type carClass {
    int engine;
    int speed;
    
    #END_USR_TYPE_VARS
}

#END_USR_TYPES

int mix = 5;
float gb = 2.2;
int myint = 8889; 
int sing_arr[1] = {1};
int ints[11] = {0,11,20,52,49,81,16,8,53,93,22};
char chars[7] = {'a', '0', 'n', '&'};
//char too_many_chars[2] = {'a', '0', 'n'}; //eroare
bool bools[2] = {true || false && true, false};
int expressionINTEGER = 1 + 2 + 3;
bool boolValue = true;
bool dmnefereste = true || (false && true);
float vloatValue = 0.85191;

usr_type myType typevar {'a', 'm', 'b', 'c'};

usr_type myType typevarEmpty;

usr_type carClass myCar {100, 200};

char charValue1 = 'a';
char charValue2 = 'j';
//string jojo = 'b';   //eroare diff types
//int c = 12.8 + 28.5; //eroare diff types
//bool b = 12 + 0.5;
bool cpo = ((true || false) && true) && true && ( 1 > 2 );
bool newcpo = (1 > 2);
//char charValue = 'b'; // eroare(redefinire)
string stringValue = "2023 -> 2024";
string strings[3] = {"abra", "cada", "bra"};
int shippuden = 2007;
//int shippuden = 2007 + ints[2];
char varp[4] = {'2', '0', '2', '3'};
//nt_exist = 2; // eroare
bool bools0cpy = bools[0]; 

#END_GLOBAL_VARS


int globalMethod(int a, int b) {
    while(1) {
        int b = 200+3;
    }
}

#END_GLOBAL_FUNCS

clean_code_executer() {
    //ints[2] = 1 + 2 + 3.5; //eroare dif types
    //ints[2] = 1>2; //eroare  
    shippuden = 2017 + ints[1];
    ints[1] = ints[1] + ints[3];
    ints[0] = 2024 + shippuden;
    varp[3] = '4';
    int oh = myint + 111;
    if (1 < 3 && 3 < 2) {
        int a = 3000;
        if(2 < 3) {
            a = 200;
        }
    }
    char mychhar = 'c';
    mychhar = 'a';
    Eval(2+3 + 4* 4 / 5 + globalMethod(oh, oh));
    Eval(2+3 + 4* 4 / 5 + globalMethod(1, 2));
    Eval(1.5+0.7);

    Eval((!true || true && false) && true );

    Eval(1+3 == 6 || 2 > 1  );
    bool myasdfea = 1 < 2;
    int intTest = 10 + expressionINTEGER;
    Eval(strings[1]);
    Eval(stringValue);
}