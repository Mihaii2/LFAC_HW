usr_type carClass {
    int engine;
    int speed;
    string model;
    int consumption;

    #END_USR_TYPE_VARS

    string getModel() {
        int a = 3;
        return model;
    }
}

#END_USR_TYPES

int mix;
int ints[11] = {0,11,20,52,49,81,16,8,53,93,22};
char chars[7] = {'a', '0', 'n', '&'};
bool bools[2] = {true || false && true, false};
int expressionINT = 1 + 2 + 3;
bool boolValue = ((true || false) && true) && true && ( 1 > 2 );
float vloatValue = 0.85191;
usr_type carClass myCar {100, 200, "Dacia", 40};
char charValue = 'a';
string stringValue = "2023 -> 2024";
string strings[3] = {"abra", "cada", "bra"};
int shippuden = 2007;

#END_GLOBAL_VARS


int globalMethod(int a, int b) {
    while(1) {
        int b = 200+3;
    }
}

int f(int z, float f, string s) {
    int ix; //should be ok
}

string check() {}


#END_GLOBAL_FUNCS

clean_code_executer() {
    shippuden = 2017;
    ints[1] = ints[1] + ints[3];
    ints[0] = 2024 + shippuden;
    int oh = mix + 111;
    shippuden = 2007;
    if (1 < 3 && 3 < 2) {
        int a = 3000;
        if(2 < 3) {
            a = 200;
        }
    }
    
    Eval(2+3 + 4* 4 / 5 + globalMethod(2, 3));
    Eval(2+3 + 4* 4 / 5 + globalMethod(1, 633)); 
    Eval(1.5+0.7);

    
    myCar.speed = 300 + 10;

    Eval((!true || true && false) && true );
    
    Eval(1+3 == 6 || 2 > 1  );
    bool myasdfea = 1 < 2;
    int intTest = 10 + expressionINT;
    Eval(strings[1]);
    Eval(myCar.speed);
    Eval("hello");
    Eval(check());

    //string str = f(1,2.2,"as"); error different types assignment    
    //ints[2] = 1>2; //eroare dif types assignment
    //ints[2] = 1 + 2 + 3.5; //eroare dif types of operands on the right
    //char too_many_chars[2] = {'a', '0', 'n'}; //eroare too many elements
    //string jojo = "asd" + "eae";   //eroare cant add strings
    //int c = 12.8 + 28.5; //eroare diff types
    //bool b = 12 + 0.5;
    //char charValue = 'b'; // eroare(redefinire)
}